#ifndef _SCANCODE_ASCII_LOOKUP
#define _SCANCODE_ASCII_LOOKUP

#include "types.h"

/* Effectively boolean values */
#define ACTIVE   0xFF
#define INACTIVE 0x00

/* Bit mask to expose only the MSB */
#define MSB_MASK 0x80

/* Size of the scancode lookup table */
#define SCANCODE_TABLE_SIZE 0x80

/* Number of modifiers */
#define NUM_MODIFIERS 0x07

/* Modifier values for scancode to ASCII mapping */
#define MODIFIER_NONE    0x00
#define MODIFIER_SHIFT   0x01
#define MODIFIER_CAPS    0x02
#define MODIFIER_BOTH    0x03
#define MODIFIER_NUMLOCK 0x04
#define MODIFIER_CTRL    0x05
#define MODIFIER_ALT     0x06

/* Scancodes that correspond to modifiers */
#define CONTROL  0x1D
#define SHIFT_L  0x2A
#define SHIFT_R  0x36
#define CAPSLOCK 0x3A
#define ALT      0x38
#define NUMLOCK  0x45
/* Not sure if ScrollLock is necessary here... */
/* ...YET! */

/* Only used for special keys (ignore for now) */
#define ESCAPE_SCANCODE 0xE0


/* Modifier for determining whether shift/caps/both are pressed */
static uint8_t modifier;
// static uint8_t special_key; // Potentially used later

/* Lookup table to see if a given key is pressed */
static uint8_t scancode_active_lut[SCANCODE_TABLE_SIZE] = { INACTIVE };
/* Lookup table to translate between scancode and ASCII value based on modifiers */
uint8_t scancode_lut[SCANCODE_TABLE_SIZE][NUM_MODIFIERS];


/*
 * translate_scancode
 *   DESCRIPTION: Provides an interface for mapping scancodes to ASCII values
 *   INPUTS: scancode -- scancode sent from the keyboard on keypress/release
 *   OUTPUTS: none
 *   RETURN VALUE: uint8_t -- ASCII character of the corresponding scancode
 *   SIDE EFFECTS: none
 */
uint8_t translate_scancode(uint8_t scancode)
{
    /* Local variables */
    uint8_t release;  /* Flag for whether or not scancode is of key released */
    
    // /* NOTE TO SELF: Hold off on numpad and special keys for the time being */
    // if (scancode == ESCAPE_SCANCODE)   /* \                            */
    // {                                  /*  \                           */
        // scancode = inb(KEYBOARD_PORT); /*   \  Irrelevant shit for now */
        // /* numpad shit probs */        /*   /  Please ignore kthxbye   */
        // special_key = ACTIVE;          /*  /                           */
    // }                                  /* /                            */
    
    /* Decomposing the scancode into its "raw" and "release" flags */
    release = scancode & MSB_MASK;
    scancode &= ~(MSB_MASK);
    
    /* Begin checking of keypresses */
    if (release)
    {
        /* Key was released and we need to mark it inactive */
        scancode_active_lut[scancode] = INACTIVE;
        /* Removing the shift modifier if either shift was released */
        if ((scancode == SHIFT_L) || (scancode == SHIFT_R))
        {
            modifier -= MODIFIER_SHIFT;
        }
    }
    else
    {
        /* Key was pressed and we need to mark it active */
        scancode_active_lut[scancode] = ACTIVE;
        /* Adding the shift modifier if either shift was pressed */
        if ((scancode == SHIFT_L) || (scancode == SHIFT_R))
        {
            modifier += MODIFIER_SHIFT;
        }
        
        /* Caps lock is a special case */
        if (scancode == CAPSLOCK)
        {
            /* Adding or removing caps modifier based on whether or not it's been applied */
            if (modifier < MODIFIER_CAPS)
            {
                modifier += MODIFIER_CAPS;
            }
            else
            {
                modifier -= MODIFIER_CAPS;
            }
        }
    
        /* Returning special control command if one exists for the given key */
        if (scancode_active_lut[CONTROL] && scancode_lut[scancode][MODIFIER_CTRL])
        {
            return scancode_lut[scancode][MODIFIER_CTRL];
        }
    
        /* Returning special alt command if one exists for the given key */
        if (scancode_active_lut[ALT] && scancode_lut[scancode][MODIFIER_ALT])
        {
            return scancode_lut[scancode][MODIFIER_ALT];
        }
        
        /* Returning special numlock code if one exists for the given key */
        if (scancode_active_lut[NUMLOCK] && scancode_lut[scancode][MODIFIER_NUMLOCK])
        {
            return scancode_lut[scancode][MODIFIER_NUMLOCK];
        }
        
        /* Otherwise just return the ASCII character for the given keypress */
        return scancode_lut[scancode][modifier];
    }
    
    /* Compiler complains if this statement isn't here */
    return INACTIVE;
}


/* Note: control code is just ~ascii code of capital letter */
uint8_t scancode_lut[SCANCODE_TABLE_SIZE][NUM_MODIFIERS] =
{
    /* nothing, shift, caps, caps + shift, numlock, control, alt */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* Nothing */
    { 0x1B, 0x1B, 0x1B, 0x1B, 0x00, 0x00, 0x00 }, /* ESC */
    { 0x31, 0x21, 0x31, 0x21, 0x00, 0x00, 0x00 }, /* 1 */
    { 0x32, 0x40, 0x32, 0x40, 0x00, 0x00, 0x00 }, /* 2 */
    { 0x33, 0x23, 0x33, 0x23, 0x00, 0x00, 0x00 }, /* 3 */
    { 0x34, 0x24, 0x34, 0x24, 0x00, 0x00, 0x00 }, /* 4 */
    { 0x35, 0x25, 0x35, 0x25, 0x00, 0x00, 0x00 }, /* 5 */
    { 0x36, 0x5E, 0x36, 0x5E, 0x00, 0x00, 0x00 }, /* 6 */
    { 0x37, 0x26, 0x37, 0x26, 0x00, 0x00, 0x00 }, /* 7 */
    { 0x38, 0x2A, 0x38, 0x2A, 0x00, 0x00, 0x00 }, /* 8 */
    { 0x39, 0x28, 0x39, 0x28, 0x00, 0x00, 0x00 }, /* 9 */
    { 0x30, 0x29, 0x30, 0x29, 0x00, 0x00, 0x00 }, /* 0 */
    { 0x2D, 0x5F, 0x2D, 0x5F, 0x00, 0x00, 0x00 }, /* - */
    { 0x3D, 0x2B, 0x3D, 0x2B, 0x00, 0x00, 0x00 }, /* = */
    { 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00 }, /* BKSP */
    { 0x09, 0x09, 0x09, 0x09, 0x00, 0x00, 0x00 }, /* TAB */
    { 0x71, 0x51, 0x51, 0x71, 0x00, 0x00, 0x00 }, /* Q */
    { 0x77, 0x57, 0x57, 0x77, 0x00, 0x00, 0x00 }, /* W */
    { 0x65, 0x45, 0x45, 0x65, 0x00, 0x00, 0x00 }, /* E */
    { 0x72, 0x52, 0x52, 0x72, 0x00, 0x00, 0x00 }, /* R */
    { 0x74, 0x54, 0x54, 0x74, 0x00, 0x00, 0x00 }, /* T */
    { 0x79, 0x59, 0x59, 0x79, 0x00, 0x00, 0x00 }, /* Y */
    { 0x75, 0x55, 0x55, 0x75, 0x00, 0x00, 0x00 }, /* U */
    { 0x69, 0x49, 0x49, 0x69, 0x00, 0x00, 0x00 }, /* I */
    { 0x6F, 0x4F, 0x4F, 0x6F, 0x00, 0x00, 0x00 }, /* O */
    { 0x70, 0x50, 0x50, 0x70, 0x00, 0x00, 0x00 }, /* P */
    { 0x5B, 0x7B, 0x5B, 0x7B, 0x00, 0x00, 0x00 }, /* [ */
    { 0x5D, 0x7D, 0x5D, 0x7D, 0x00, 0x00, 0x00 }, /* ] */
    { 0x0A, 0x0A, 0x0A, 0x0A, 0x00, 0x00, 0x00 }, /* ENTER */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* LCTRL */
    { 0x61, 0x41, 0x41, 0x61, 0x00, 0x00, 0x00 }, /* A */
    { 0x73, 0x53, 0x53, 0x73, 0x00, 0x00, 0x00 }, /* S */
    { 0x64, 0x44, 0x44, 0x64, 0x00, 0x00, 0x00 }, /* D */
    { 0x66, 0x46, 0x46, 0x66, 0x00, 0x00, 0x00 }, /* F */
    { 0x67, 0x47, 0x47, 0x67, 0x00, 0x00, 0x00 }, /* G */
    { 0x68, 0x48, 0x48, 0x68, 0x00, 0x00, 0x00 }, /* H */
    { 0x6A, 0x4A, 0x4A, 0x6A, 0x00, 0x00, 0x00 }, /* J */
    { 0x6B, 0x4B, 0x4B, 0x6B, 0x00, 0x00, 0x00 }, /* K */
    { 0x6C, 0x4C, 0x4C, 0x6C, 0x00, 0xB3, 0x00 }, /* L */
    { 0x3B, 0x3A, 0x3B, 0x3A, 0x00, 0x00, 0x00 }, /* ; */
    { 0x27, 0x22, 0x27, 0x22, 0x00, 0x00, 0x00 }, /* ' */
    { 0x60, 0x7E, 0x60, 0x7E, 0x00, 0x00, 0x00 }, /* ` */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* LSHIFT */
    { 0x5C, 0x7C, 0x5C, 0x7C, 0x00, 0x00, 0x00 }, /* \ */
    { 0x7A, 0x5A, 0x5A, 0x7A, 0x00, 0x00, 0x00 }, /* Z */
    { 0x78, 0x58, 0x58, 0x78, 0x00, 0x00, 0x00 }, /* X */
    { 0x63, 0x43, 0x43, 0x63, 0x00, 0xBC, 0x00 }, /* C */
    { 0x76, 0x56, 0x56, 0x76, 0x00, 0x00, 0x00 }, /* V */
    { 0x62, 0x42, 0x42, 0x62, 0x00, 0x00, 0x00 }, /* B */
    { 0x6E, 0x4E, 0x4E, 0x6E, 0x00, 0x00, 0x00 }, /* N */
    { 0x6D, 0x4D, 0x4D, 0x6D, 0x00, 0x00, 0x00 }, /* M */
    { 0x2C, 0x3C, 0x2C, 0x3C, 0x00, 0x00, 0x00 }, /* , */
    { 0x2E, 0x3E, 0x2E, 0x3E, 0x00, 0x00, 0x00 }, /* . */
    { 0x2F, 0x3F, 0x2F, 0x3F, 0x00, 0x00, 0x00 }, /* / */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* RSHIFT */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* PRTSC */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* LALT */
    { 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00 }, /* SPACE */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* CAPS */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF1 }, /* F1 */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF2 }, /* F2 */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF3 }, /* F3 */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF4 }, /* F4 */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF5 }, /* F5 */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF6 }, /* F6 */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF7 }, /* F7 */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8 }, /* F8 */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF9 }, /* F9 */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFA }, /* F10 */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* NUMLOCK */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* SCROLLLOCK */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* NUMPAD7 */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* NUMPAD8 */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* NUMPAD9 */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* NUMPAD- */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* NUMPAD7 */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* NUMPAD7 */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* NUMPAD7 */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* NUMPAD+ */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* NUMPAD1 */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* NUMPAD2 */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* NUMPAD3 */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* NUMPAD0 */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* NUMPAD. */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFB }, /* F11 */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC }, /* F12 */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, /* UNUSED */
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }  /* UNUSED */
};

#endif /* _SCANCODE_ASCII_LOOKUP */
